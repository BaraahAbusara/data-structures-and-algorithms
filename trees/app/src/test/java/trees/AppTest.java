/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void testingTreeConstructor() {
        BinarySearchTree BST = new BinarySearchTree();
        assertNotNull(BST);
    }

    @Test void testingTreeOnlyWithRoot (){
        BinarySearchTree BST = new BinarySearchTree();
        BST.add(1);
        ArrayList<Double> list = new ArrayList<>();
        list.add(1.0);
        assertEquals(BST.inOrder(BST.root,true),list);
    }

    @Test void testingAddingLeftAndRight (){ //can add a left and a right node and returns an array using inOrder
        BinarySearchTree BST = new BinarySearchTree();
        BST.add(1);
        BST.add(2);
        BST.add(0);

        ArrayList<Double> list = new ArrayList<>();
        list.add(0.0);
        list.add(1.0);
        list.add(2.0);
        assertEquals(BST.inOrder(BST.root,true),list);
    }

    @Test void testingPreOrder (){ //can add a left and a right node and returns an array using preOrder
        BinarySearchTree BST = new BinarySearchTree();
        BST.add(1);
        BST.add(2);
        BST.add(0);

        ArrayList<Double> list = new ArrayList<>();
        list.add(1.0);
        list.add(0.0);
        list.add(2.0);
        assertEquals(BST.preOrder(BST.root,true),list);
    }
    @Test void testingPostOrder(){ //can add a left and a right node and returns an array using postOrder
        BinarySearchTree BST = new BinarySearchTree();
        BST.add(1);
        BST.add(2);
        BST.add(0);

        ArrayList<Double> list = new ArrayList<>();
        list.add(0.0);
        list.add(2.0);
        list.add(1.0);
        assertEquals(BST.postOrder(BST.root,true),list);
    }
    @Test void testingContainsTrue (){
        BinarySearchTree BST = new BinarySearchTree();
        BST.add(1);
        BST.add(2);
        BST.add(0);

        assertEquals(BST.contains(2),true);
    }
    @Test void testingContainsFalse (){
        BinarySearchTree BST = new BinarySearchTree();
        BST.add(1);
        BST.add(2);
        BST.add(0);

        assertEquals(BST.contains(5),false);
    }

    @Test void treeMaxTestingEmptyBSTree(){
        BinarySearchTree BST = new BinarySearchTree();

        assertEquals(0,BST.treeMax(BST.getRoot()));
    }

    @Test void treeMaxTestingFound(){
        BinarySearchTree BST = new BinarySearchTree();
        BST.add(1);
        BST.add(2);
        BST.add(0);
        assertEquals(2 ,BST.treeMax(BST.getRoot()));
    }

    @Test
    void breadthFirstTest(){
        BinarySearchTree BST = new BinarySearchTree();
        BST.add(1);
        BST.add(2);
        BST.add(3);
        BST.add(4);
        BST.add(5);
        List <Double> expectedList =  new ArrayList<>();
        expectedList.add(1.0);
        expectedList.add(2.0);
        expectedList.add(3.0);
        expectedList.add(4.0);
        expectedList.add(5.0);
        assertEquals(expectedList,BST.breadthFirst());
    }

    @Test
    void breadthFirstEmptyTreeTest(){
        BinarySearchTree BST = new BinarySearchTree();

        List <Double> expectedList =  new ArrayList<>();
        assertEquals(expectedList,BST.breadthFirst());
    }




}
